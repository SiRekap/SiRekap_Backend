edition: 1.0.0
name: Sirekap_Backend
access: 'default'

vars:
  region: 'ap-southeast-5'
  service:
    name: 'web-framework-m94o'
    description: 'Serverless Devs Web Framework Service'

services:
  framework:
    component: fc
    actions:
      pre-deploy:
        - run: go mod tidy
          path: ./
        - run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o main main.go
          path: ./
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: 'sirekap-backend'
        description: 'Serverless Devs Backend Function'
        codeUri: ./
        runtime: custom.debian10
        memorySize: 1024
        timeout: 30
        instanceConcurrency: 100
        caPort: 8080
        customRuntimeConfig:
          command:
            - '/main'
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*


 


# edition: 1.0.0
# name: hello-world-app
# # access 是当前应用所需要的密钥信息配置：
# # 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# # 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
# access: "{{ access }}"

# vars: # 全局变量
#   region: "{{ region }}"
#   service:
#     name: "{{ serviceName }}"
#     description: 'hello world by serverless devs'

# services:
#   helloworld: # 业务名称/模块名称
#     # 如果只想针对 helloworld 下面的业务进行相关操作，可以在命令行中加上 helloworld，例如：
#     # 只对helloworld进行构建：s helloworld build
#     # 如果不带有 helloworld ，而是直接执行 s build，工具则会对当前Yaml下，所有和 helloworld 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
#     component:  fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
#     actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
#       pre-deploy: # 在deploy之前运行
#         - run: GO111MODULE=on go get github.com/aliyun/fc-runtime-go-sdk
#           path: ./
#         - run: GO111MODULE=on GOOS=linux CGO_ENABLED=0 go build -o target/main main.go
#           path: ./
# #        - component: fc build --use-docker --dockerfile ./code/Dockerfile  # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
# #        - run: docker build xxx          # 要执行的系统命令，类似于一种钩子的形式
# #          path: ./src                    # 执行系统命令/钩子的路径
# #        - plugin: myplugin               # 与运行的插件 （可以通过s cli registry search --type Plugin 获取组件列表）
# #          args:                          # 插件的参数信息
# #            testKey: testValue
# #      post-deploy: # 在deploy之后运行
# #        - component: fc versions publish # 要运行的命令行
#     props:
#       region: ${vars.region}              # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
#       service: ${vars.service}
#       function:
#         name: "{{ functionName }}"
#         description: 'hello world by serverless devs'
#         runtime: go1
#         codeUri: ./
#         handler: main
#         memorySize: 128
#         timeout: 60
#       triggers:
#         - name: httpTrigger
#           type: http
#           config:
#             authType: anonymous
#             methods:
#               - GET
#               - POST
#       customDomains:
#         - domainName: auto
#           protocol: HTTP
#           routeConfigs:
#             - path: /*
#               methods:
#                 - GET
#                 - POST
# #  next-function: # 第二个函数的案例，仅供参考
# #    # 如果在当前项目下执行 s deploy，会同时部署模块：
# #    #   helloworld：服务hello-world-service，函数cpp-event-function
# #    #   next-function：服务hello-world-service，函数next-function-example
# #    # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next-function deploy
# #    # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next-function deploy function
# #    # 更多命令可参考：https://www.serverless-devs.com/fc/readme#文档相关
# #    component: fc
# #    props:
# #      region: ${vars.region}
# #      service: ${vars.service} # 应用整体的服务配置
# #      function: # 定义一个新的函数
# #        name: next-function-example
# #        description: 'hello world by serverless devs'
